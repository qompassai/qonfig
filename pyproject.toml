# /qompassai/dotfiles/.config/pyproject/pyproject.toml
# Qompass AI Pyproject Config
# Copyright (C) 2025 Qompass AI, All rights reserved
#####################################################

[build-system]
build-backend = 'mesonpy'
requires = ['meson-python', 'setuptools<81']

[project]
authors = [{ name = "Matt A. Porter", email = "map@qompass.ai" }]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Education",
  "Intended Audience :: Healthcare Industry",
  "Intended Audience :: Science/Research",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Education",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Medical Science Apps.",
  "Typing :: Typed",
]
dependencies = []
description = "Quantum AI models for healthcare and education"
dynamic = ["version"]
keywords = ["ai", "education", "healthcare", "machine-learning", "quantum"]
license = "AGPL-3.0 AND QCDA-1.0"
license-files = ["LICENSE-AGPL", "LICENSE-QCDA"]
name = "qai"
readme = "README.md"
requires-python = ">=3.11"

[project.optional-dependencies]
dev = ["black>=24.0.0", "mypy>=1.11.0", "pre-commit>=3.8.0", "ruff>=0.6.0"]
quantum = ["cirq>=1.4.0", "pennylane>=0.37.0", "qiskit>=1.0.0"]
test = [
  "pytest>=8.0",
  "pytest-asyncio>=0.23.0",
  "pytest-cov>=5.0.0",
  "pytest-timeout>=2.3.0",
]

[tool.bandit]
exclude_dirs = ["docs", "tests"]
skips = ["B101", "B601"]

[tool.black]
extend-exclude = '''
/(
  \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''
include = '\.pyi?$'
line-length = 120
target-version = ['py311']

[tool.coverage.report]
exclude_lines = [
  "@(abc\\.)?abstractmethod",
  "class .*\\bProtocol\\):",
  "def __repr__",
  "if 0:",
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
  "if self.debug:",
  "if settings.DEBUG",
  "pragma: no cover",
  "raise AssertionError",
  "raise NotImplementedError",
]
precision = 2
show_missing = true
ignore_errors = true

[tool.coverage.run]
source = ["src"]
omit = [
  "*/cache/*",
  "*/paru/*",
  "*shibokensupport*",
  "*signature_bootstrap*",
  "*/site-packages/*",
  "*/.cache/*",
  "*/nix/store/*",
  "*/nix/eval-cache*",
  "*/.nix-*",
  "*/var/cache/pacman/*",
  "*/.cache/yay/*",
  "*/.cache/paru/*",
  "*/.cache/pikaur/*",
  "*/.cache/trizen/*",
  "*/var/lib/repo/*",
  "*/build/*",
  "*/dist/*",
  "*/__pycache__/*",
  "*.egg-info/*",
  "*/numpy-*/tmp_install/*",
  "*/python-numpy-mkl/*",
  "*/tmp_install/*",
  "shibokensupport/*",
  "signature_bootstrap.py",
]

[tool.isort]
ensure_newline_before_comments = true
force_grid_wrap = 0
include_trailing_comma = true
known_first_party = ["qai"]
known_third_party = [
  "cirq",
  "numpy",
  "pandas",
  "pennylane",
  "qiskit",
  "sklearn",
  "torch",
]
line_length = 120
multi_line_output = 3
profile = "black"
use_parentheses = true

[tool.mypy]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
no_implicit_optional = true
python_version = "3.13"
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["cirq.*", "pennylane.*", "qiskit.*", "sklearn.*", "torch.*"]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
addopts = [
  "--color=yes",
  "--cov=qai",
  "--cov-report=html",
  "--cov-report=term-missing",
  "--cov-report=xml",
  "--durations=10",
  "--import-mode=importlib",
  "--strict-markers",
  "--verbose",
]
filterwarnings = [
  "error::RuntimeWarning",
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning",
  "ignore::pytest.PytestUnraisableExceptionWarning",
]
log_cli = true
log_cli_level = "INFO"
log_file = "tests/pytest.log"
log_file_level = "DEBUG"
markers = [
  "flaky: marks tests that occasionally fail",
  "gpu: tests requiring GPU resources",
  "integration: marks integration tests",
  "quantum: tests requiring quantum backend",
  "security: security-related tests",
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "unit: marks unit tests",
]
minversion = "8.0"
norecursedirs = [
  "*.egg",
  ".git",
  ".tox",
  ".venv",
  "__pycache__",
  "build",
  "docs",
  "env",
  "venv",
]
python_classes = "Test*"
python_files = "test_*.py"
python_functions = "test_*"
testpaths = ["tests"]
timeout = 60
xfail_strict = false

[tool.ruff]
exclude = [
  ".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg",
  ".ipynb_checkpoints", ".mypy_cache", ".nox", ".pants.d",
  ".pyenv", ".pytest_cache", ".pytype", ".ruff_cache", ".svn",
  ".tox", ".venv", ".vscode", "__pypackages__", "_build",
  "buck-out", "build", "dist", "node_modules", "site-packages", "venv"
]
line-length = 120
indent-width = 4
target-version = "py313"

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
exclude = ["*.pyi"]
docstring-code-format = true
docstring-code-line-length = 1

[tool.ruff.lint]
ignore = ["B008", "C901", "E501", "PLR0913", "S101", "E401"]
select = [
  "A",
  "ARG",
  "ASYNC",
  "B",
  "C4",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PERF",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "SIM",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
fixable = ["ALL"]
unfixable = ["B"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.lint.isort]
known-first-party = ["qai"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402"]
"docs/**/*" = ["INP001"]
"tests/**/*" = ["ARG", "PLR2004", "S101", "TID252", "SIM", "PERF"]

[tool.security]
audit-requirements = true
check-vulnerabilities = true

[tool.setuptools.package-data]
qai = ["*.json", "*.toml", "*.yaml", "*.yml", "py.typed"]

[tool.setuptools.packages.find]
exclude = ["docs*", "scripts*", "tests*"]
include = ["qai*"]
where = ["."]

[tool.setuptools_scm]
version_scheme = "post-release"

[tool.sphinx]
build-dir = "docs/_build"
extensions = [
  "sphinx.ext.autodoc",
  "sphinx.ext.napoleon",
  "sphinx.ext.viewcode",
]
source-dir = "docs"

[tool.uv]
check-url = "https://test.pypi.org/simple"
concurrent-builds = 10
concurrent-downloads = 10
config-settings = { editable_mode = "compat" }
index-strategy = "unsafe-best-match"
index-url = "https://test.pypi.org/simple"
keyring-provider = "subprocess"
native-tls = true
publish-url = "https://test.pypi.org/legacy/"
pypy-install-mirror = "https://downloads.python.org/pypy"
resolution = "highest"
upgrade = true
trusted-publishing = "always"

[tool.uv.pip]
all-extras = true
allow-empty-requirements = true
break-system-packages = true
extra = ["dev", "docs"]
index-url = "https://test.pypi.org/simple"
index-strategy = "unsafe-best-match"
keyring-provider = "subprocess"
no-extra = ["dev", "docs"]
prerelease = "allow"
#python = "3.13"
python-platform = "x86_64-unknown-linux-gnu"
#python-version = "3.13"
resolution = "highest"
upgrade = true


[[tool.uv.index]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cu128"
explicit = true

[tool.uv.sources]
torch = { index = "pytorch" }
